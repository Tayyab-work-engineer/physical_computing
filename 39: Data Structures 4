Create a queue using array:
A queue is a first in first out. A queue made with arrays has a fixed size. 
Two pointers are used, front and rear. They are started with -1, if a item is added,
front increases to 0 and rear increases to 0. And if another item is added, rear increases to 1.
If an item is removed, first it is printed then front increases to 1.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 100


int queue[SIZE];
int front = -1;
int rear = -1;

void enqueue(){
    int insert_item;
    if (rear == SIZE - 1) {
        printf("Overflow \n");
    } else {
        if (front == -1){
            front = 0;
        }
        printf("Element to be inserted in the queue\n");
        scanf("%d", &insert_item);
        rear = rear + 1;
        queue[rear] = insert_item;
    }
    
}

void dequeue(){
    //check if queue is empty
    if (front == -1 || front > rear){
        printf("Underflow \n");
        return ;
    }
    else{
        printf("Element deleted from the Queue: %d\n", queue[front]);
        front = front + 1;
    }
}

void show()
{
    
    if (front == - 1)
        printf("Empty Queue \n");
    else
    {
        printf("Queue: \n");
        for (int i = front; i <= rear; i++)
            printf("%d ", queue[i]);
        printf("\n");
    }
}

int main() {
    int ch;
    while (1)
    {
        printf("1.Enqueue Operation\n");
        printf("2.Dequeue Operation\n");
        printf("3.Display the Queue\n");
        printf("4.Exit\n");
        printf("Enter your choice of operations : ");
        scanf("%d", &ch);
        switch (ch)
        {
            case 1:
            enqueue();
            break;
            case 2:
            dequeue();
            break;
            case 3:
            show();
            break;
            case 4:
            exit(0);
            default:
            printf("Incorrect choice \n");
        }
    }
    return 0;
}





Create a queue using linked list:



