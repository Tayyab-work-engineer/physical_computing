Implement linked lists (singly):
What are linked lists? 
Collection of data elements(nodes)
Each node contains a reference to the next node in the list
Elements hold whatever data the application needs
The last element has reference to NULL
Ex:
Element: 38  --1000-> 13 --1020-> 49 --NULL->
In this example, the first element is 38 and it
points to the next element 13 which is on
address 1000. The second element is 13 which
pointers to the next element 49 which is
on address 1020.


Linked lists(doubly) 
This is similar to a linked list(singly) however
each element points to the next element and the 
previous element. 

+elements can be easily inserted and removed
+underlying memory doesn't need to be reorganised
-can't do constant time random item access
-item lookup is linear time complexitiy ( O(n) )


Programming a linked list:
Element: 38  --1000-> 13 --1020-> 49 --NULL->
________________________________________________________________
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node{
    int data;
    struct Node* next;
    
}

int main() {
    struct Node one = {38, NULL};
    struct Node two = {13, NULL};
    struct Node three = {49, NULL};
    one.next = &two;
    two.next = &three;
    return 0;
}

________________________________________________________________

Another method: Using dynamically allocated memory
________________________________________________________________
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node{
    int data;
    struct Node* next;
}Node; //Node is a struct that represents one element in a linked list.

//Function to create a new node
Node* createNode(int data){
	Node* newNode = (Node*)malloc(sizeof(Node));
	if (!newNode){
		printf("Memory allocation failed!\n");
		exit(1);

	}
	newNode->data = data;
	newNode->next = NULL;

	return newNode;
}

void printList(Node* node){
	while(node){
		printf("%d -> ", node->data);
		node = node->next;
	}
	printf("null\n");
}




int main() {
	Node* node1 = createNode(38);
	Node* node2 = createNode(13);
	Node* node3 = createNode(49);

	node1->next = node2;
	node2->next = node3;

	printList(node1);

	free(node1);
	free(node2);
	free(node3);

    return 0;
}

____________________________________________________________
Adding more operations:Adds new nodes to the end of the linked list
#include <stdio.h>
#include <stdlib.h>

// Define the Node structure
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insertAtEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to print the linked list
void printList(Node* node) {
    while (node) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("null\n");
}

// Function to free the memory used by the linked list
void freeList(Node* head) {
    Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    Node* head = NULL;

    // Array of numbers to insert
    int numbers[] = {10, 20, 30, 40, 50};
    int size = sizeof(numbers) / sizeof(numbers[0]);

    // Build the linked list from the array
    for (int i = 0; i < size; i++) {
        insertAtEnd(&head, numbers[i]);
    }

    // Print the created linked list
    printf("Linked list created from array:\n");
    printList(head);

    // Free the memory used by the list
    freeList(head);

    return 0;
}

