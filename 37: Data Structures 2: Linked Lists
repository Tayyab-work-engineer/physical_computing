Implement linked lists (singly):
What are linked lists? 
Collection of data elements(nodes)
Each node contains a reference to the next node in the list
Elements hold whatever data the application needs
The last element has reference to NULL
Ex:
Element: 38  --1000-> 13 --1020-> 49 --NULL->
In this example, the first element is 38 and it
points to the next element 13 which is on
address 1000. The second element is 13 which
pointers to the next element 49 which is
on address 1020.


Linked lists(doubly) 
This is similar to a linked list(singly) however
each element points to the next element and the 
previous element. 

+elements can be easily inserted and removed
+underlying memory doesn't need to be reorganised
-can't do constant time random item access
-item lookup is linear time complexitiy ( O(n) )


Programming a linked list:
Video 1(Creating a node)
Node has data+link

struct node{
	int data;
	struct node *link; //pointer to another node
};

How to create a node in C:
#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node *link;
};

int main(){
	struct node *head = NULL;	//pointer to the first node of the list, similar to int *ptr;
	head = (struct node *)malloc(sizeof(struct node)); //allocate memory on the heap and can be accessed through head pointer, similar to ptr = (int*)malloc(...

	head -> data = 45;
	head -> link = NULL;

	printf("%d", head->data);
	return 0;
}

output: 45

video 2(creating a single linked list):
Example
 45  --2000-> 98 --3000-> 3 --NULL->
 |             |          |
1000          2000       3000
Head

#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node *link;
};

int main(){
	struct node *head = malloc(sizeof(struct node)); //lets say returns heap memory address 1000
	head -> data = 45; //saves 45 into the heap memory for data
	head -> link = NULL; //saves NULL into the heap memory for link

	head = malloc(sizeof(struct node));  //lets say returns heap memory address 2000
	head -> data = 98;
	head -> link = NULL;

	return 0;
}
Visualisation
 45|NULL   98|NULL
 |          |         
1000       2000       
	   Head

How do we access the first node? We lost connect to it. We can fix it by using another pointer

 45|NULL   98|NULL
 |          |         
1000       2000       
Head	   Current


#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node *link;
};

int main(){
	struct node *head = malloc(sizeof(struct node)); //lets say returns heap memory address 1000
	head -> data = 45; //saves 45 into the heap memory for data
	head -> link = NULL; //saves NULL into the heap memory for link

	struct node *current = malloc(sizeof(struct node));  //lets say returns heap memory address 2000
	current -> data = 98;
	current -> link = NULL;

	//Now update the link part of the first node
	head->link = current;

	return 0;
}

Visualisation:

 45|2000 ---->   98|NULL
 |                |         
1000            2000       
Head	        Current

Video 3(part 2):
Adding the third node.
What does head->link give? head --> 1000? 2000
what does head->link-link give? head --> 1000 --> 2000 ? 3000

 45  --2000-> 98 --3000-> 3 --NULL->
 |             |          |
1000          2000       3000
Head

#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node *link;
};

int main(){
	struct node *head = malloc(sizeof(struct node)); //lets say returns heap memory address 1000
	head -> data = 45; //saves 45 into the heap memory for data
	head -> link = NULL; //saves NULL into the heap memory for link

	struct node *current = malloc(sizeof(struct node));  //lets say returns heap memory address 2000
	current -> data = 98;
	current -> link = NULL;
	head->link = current;

	current = malloc(sizeof(struct node));
	current->data = 3;
	current->link = NULL;

	return 0;
}

Visualisation:
 45  --2000-> 98|NULL     3 --NULL->
 |             |          |
1000          2000       3000
Head                     Current

Current points to the third node and not the second node anymore.
#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node *link;
};

int main(){
	struct node *head = malloc(sizeof(struct node)); //lets say returns heap memory address 1000
	head -> data = 45; //saves 45 into the heap memory for data
	head -> link = NULL; //saves NULL into the heap memory for link

	struct node *current = malloc(sizeof(struct node));  //lets say returns heap memory address 2000
	current -> data = 98;
	current -> link = NULL;
	head->link = current; //first node points to the second node

	current = malloc(sizeof(struct node));
	current->data = 3;
	current->link = NULL;

	head->link->link = current; //second node points to the third node

	return 0;
}

 45  --2000-> 98 --3000-> 3 --NULL->
 |             |          |
1000          2000       3000
Head


Video 3(traversing a single linked list):
#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node *link;
};

void count_of_nodes(struct node *head){//takes in head
	int count = 0;
	//check if linked list in empty
	if (head == NULL){
		printf("Linked list is empty");
	}

	struct node *ptr = NULL;
	ptr = head; //
	while(ptr != NULL){
		count++;
		printf("%d\n",ptr->data);
		ptr = ptr->link;
	}
	printf("Number of nodes %d",count);
}

int main(){
	struct node *head = malloc(sizeof(struct node)); //lets say returns heap memory address 1000
	head -> data = 45; //saves 45 into the heap memory for data
	head -> link = NULL; //saves NULL into the heap memory for link

	struct node *current = malloc(sizeof(struct node));  //lets say returns heap memory address 2000
	current -> data = 98;
	current -> link = NULL;
	head->link = current; //first node points to the second node

	current = malloc(sizeof(struct node));
	current->data = 3;
	current->link = NULL;

	head->link->link = current; //second node points to the third node
	count_of_nodes(head);
	return 0;
}

