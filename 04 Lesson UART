first run the code using command prompt then as soon as
put into another terminal to see:
cmd /c mode com3 baud=9600 parity=n data=8
cmd /c type com3

if not working, press the red button on arduino when you run: cmd /c type com3



Code:
#include <avr/io.h>

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <util/delay.h>

#define BAUD 9600
#include <util/setbaud.h>


void uart_init(void)
{
	//baud rate generator
	//ensure the timing of pulses
	//corresponds to the expected bit rate
	UBRR0H = UBRRH_VALUE;
	UBRR0L = UBRRL_VALUE;

	//character size 8
	UCSR0C = UCSR0C | (1<<UCSZ01) | (1<<UCSZ00); //bitwise OR

	//transmitter enable
	UCSR0B = UCSR0B | (1<<TXEN0);
	return;
}

int main(void) {
	//configure UART
	uart_init();
	//send data
	//assign the ASCII code for A to UDR0
	UDR0 = 'A';

	return 0;
}

for transmitting data on mkr
int count = 0; // Counter to track the number of 'A' sent

void setup() {
  pinMode(9, OUTPUT);  
  digitalWrite(9, LOW); // Ensure the output starts in the LOW state

  pinMode(8, OUTPUT); 
  digitalWrite(8, LOW); // Ensure the output starts in the LOW state

  pinMode(10, INPUT_PULLUP);  // Set pin 10 as an input with an internal pull-up resistor
  // This means pin 10 will normally be HIGH unless connected to GND.

  Serial.begin(9600);
}

void loop() {
  if (digitalRead(10) == LOW) { // If button is pressed
    digitalWrite(9, HIGH);  
    digitalWrite(8, LOW);
    delay(200);
  } else {
    Serial.write('A');
    count++;
    digitalWrite(9, LOW);  
    digitalWrite(8, HIGH);
    
    if (count >= 10) { // Reset Serial Monitor after 10 'A'
      Serial.end();
      delay(500); // Short delay before restarting
      Serial.begin(9600);
      count = 0; // Reset counter
    }
    delay(200); // Simple debounce delay
  }
}





For recieving data,

To run the code put into command promt

avr-gcc -Wall -g -Os -mmcu=atmega328p code.c -o code.elf

avr-objcopy -O ihex code.elf code.hex

avrdude -C "C:\Users\mtbai\Downloads\arduino-1.8.19-windows\arduino-1.8.19\hardware\tools\avr\etc\avrdude.conf" -p atmega328p -c arduino -P COM3 -b 115200 -D -U flash:w:"C:\Users\mtbai\Desktop\code.hex":i

cmd /c mode com3 baud=9600 parity=n data=8

echo A > COM3



Code:
#include <avr/io.h>

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <util/delay.h>
#define BAUD 9600
#include <util/setbaud.h>


void uart_init(void)
{
	//baud rate generator
	//ensure the timing of pulses
	//corresponds to the expected bit rate
	UBRR0H = UBRRH_VALUE;
	UBRR0L = UBRRL_VALUE;

	//character size 8
	UCSR0C = UCSR0C | (1<<UCSZ01) | (1<<UCSZ00); //bitwise OR

	//transmitter enable
	UCSR0B = UCSR0B | (1<<RXEN0) | (1<<RXEN0);
	return;
}

int main(void) {
	char c=0;
	DDRB = (1<<PB5);
	PORTB = 0; //start as 0

	//configure UART
	uart_init();

	//make a busy while loop , keep checking if any data is recieved
	while( !(UCSR0A & (1<<RXC0)) ); //if data is not recieved keep doing	

	//UDR0 is used for transmitting and recieving
	//so it could contain data that has been transmitted or recieved
	c = UDR0; //will copy UDR0 into c

	if(c==65)
		PORTB = (1<<PB5);

	return 0;
}


For receiving on mkr,
void setup() {
  pinMode(9, OUTPUT);  // Yellow LED
  pinMode(8, OUTPUT);  // Red LED
  digitalWrite(9, LOW); // Start with LEDs OFF
  digitalWrite(8, LOW);

  Serial.begin(9600); // Start UART communication at 9600 baud
}

void loop() {
  if (Serial.available()) { // Check if data is received
    char c = Serial.read(); // Read the received character

    if (c == 'y') {
      digitalWrite(9, HIGH); // Turn ON Yellow LED
      digitalWrite(8, LOW);  // Turn OFF Red LED
    } 
    else if (c == 'r') {
      digitalWrite(9, LOW);  // Turn OFF Yellow LED
      digitalWrite(8, HIGH); // Turn ON Red LED
    } 
    else {
      digitalWrite(9, LOW);  // Turn OFF both LEDs
      digitalWrite(8, LOW);
    }
  }
}





for receiving and sending data,
put into command prompt
avr-gcc -Wall -g -Os -mmcu=atmega328p code.c -o code.elf
avr-objcopy -O ihex code.elf code.hex  
avrdude -C "C:\Users\mtbai\Downloads\arduino-1.8.19-windows\arduino-1.8.19\hardware\tools\avr\etc\avrdude.conf" -p atmega328p -c arduino -P COM3 -b 115200 -D -U flash:w:"C:\Users\mtbai\Desktop\code.hex":i 
cmd /c mode com3 baud=9600 parity=n data=8  
echo f > COM3 && cmd /c type com3 

code:
#include <avr/io.h>

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <util/delay.h>
#define BAUD 9600
#include <util/setbaud.h>


void uart_init(void)
{
	//baud rate generator
	//ensure the timing of pulses
	//corresponds to the expected bit rate
	UBRR0H = UBRRH_VALUE;
	UBRR0L = UBRRL_VALUE;

	//character size 8
	UCSR0C = UCSR0C | (1<<UCSZ01) | (1<<UCSZ00); //bitwise OR

	//transmitter enable
	UCSR0B = UCSR0B | (1<<RXEN0) | (1<<RXEN0);
	return;
}

int main(void) {
	char c=0;
	DDRB = (1<<PB5);
	PORTB = 0; //start as 0

	//configure UART
	uart_init();

	//make a busy while loop , keep checking if any data is recieved
	while( !(UCSR0A & (1<<RXC0)) ); //if data is not recieved keep doing	

	//UDR0 is used for transmitting and recieving
	//so it could contain data that has been transmitted or recieved
	c = UDR0; //will copy UDR0 into c
	if(c>65 && c<=90)
		c=c+32; //received upper case -> convert to lowercase
	else if(c>=97 && c<=122)
		c=c-32;//lower case to upper case
	else
		c=10;


	UDR0 = c;
	return 0;
}

Receive and Transmit using mkr
void setup() {
  pinMode(9, OUTPUT);  // Yellow LED
  pinMode(8, OUTPUT);  // Red LED
  digitalWrite(9, LOW); // Start with LEDs OFF
  digitalWrite(8, LOW);

  Serial.begin(9600); // Start UART communication at 9600 baud
}

void loop() {
  if (Serial.available()) { // Check if data is received
    char c = Serial.read(); // Read the received character

    if (c >= 'A' && c <= 'Z') {
      c += 32;  // Convert uppercase to lowercase

      digitalWrite(9, HIGH); // Turn ON Yellow LED
      digitalWrite(8, LOW);  // Turn OFF Red LED
    } 
    else if (c >= 'a' && c <= 'z') {
      c -= 32;  // Convert lowercase to uppercase
      digitalWrite(9, LOW);  // Turn OFF Yellow LED
      digitalWrite(8, HIGH); // Turn ON Red LED
    } 
    else {
      c = '\n'; // If not a letter, send a newline
      digitalWrite(9, LOW);  // Turn OFF both LEDs
      digitalWrite(8, LOW);
    }

    Serial.write(c); // Send back the converted character
  }
}

