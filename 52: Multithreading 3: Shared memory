Shared memory and race conditions â€” explain and demonstrate.

When multiple threads are run, they share the same memory space.
	pthread_t thread1,thread2;

	pthread_create(&thread1, NULL, foo, (void*)"Thread1 is running");
	pthread_create(&thread1, NULL, foo, (void*)"Thread2 is running");
Advantages:
Improved Performance: By allowing simultaneous execution of tasks, multithreading can 
lead to faster execution and better responsiveness. 

Resource Sharing: Threads can easily share data and resources, reducing redundancy and 
improving efficiency. 

Simplified Program Structure: In some cases, multithreading can simplify program structure by breaking down complex tasks into smaller, manageable threads
This can introduce challenges such as race conditions, when multiple threads access
and modify the same data simultaneously.

https://www.youtube.com/watch?v=raLCgPK-Igc
What is a race condition?
A race condition occurs when a program depends on the timing of one or more
events to function correctly.

A race condition typically occurs when multiple threads access a shared variable(
or state) at the same time.

Code that that a race condition
code.c
#include <pthread.h>
#include <stdio.h>

#include "bank.h"

void* deposit(void *amount);

int main(){
	int before = read_balance();

	printf("Before: %d\n", before);

	pthread_t thread1,thread2;

	int deposit1 = 300;
	int deposit2 = 200;

	pthread_create(&thread1, NULL, deposit, (void*) &deposit1);
	pthread_create(&thread2, NULL, deposit, (void*) &deposit2);

	pthread_join(thread1, NULL);
	pthread_join(thread2, NULL);

	int after = read_balance();

	printf("After: %d\n", after);

	return 0;

}

void* deposit(void *amount){

	int account_balance = read_balance();

	account_balance += *( (int*) amount);

	write_balance(account_balance);


}

bank.h
#ifndef BANK_H
#define BANK_H

int read_balance();
void write_balance(int new_balance);

#endif

bank.c

#include <unistd.h>

int balance = 0;

int read_balance()
{
	usleep(250000);
	return balance;
}

void write_balance(int new_balance){
	usleep(250000);
	balance = new_balance;
}

output?
PS C:\Users\mtbai> cd desktop
PS C:\Users\mtbai\desktop> cd mutex
PS C:\Users\mtbai\desktop\mutex> gcc code.c bank.c -o code.exe -lpthread
PS C:\Users\mtbai\desktop\mutex> ./code.exe
Before: 0
After: 200

How to fix?
Use mutex


