Code:
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect){
	//toggle LED
	PORTB ^= (1<<PB5);
}

int main(void)
{
	DDRB |= (1<<PB5);

	//Timer 1 CTC Mode 4
	TCCR1A = 0;
	TCCR1B = (1<<WGM12);

	// Prescaler 1024
	TCCR1B |= (1<<CS12) | (1<<CS10);

	//Set timeout
	OCR1A = 2*5859; //led is on for 0.75adjust by multipling or dividing, 

	//Enable interrupts
	TIMSK1 |= (1<<OCIE1A);

	sei();

	while(1);
}




Using two timers:

#include <avr/interrupt.h>  // Include for interrupt handling
#include <avr/io.h>         // Include for input/output register definitions

// ISR for Timer1 Compare Match A interrupt
ISR(TIMER1_COMPA_vect) {
    // Toggle PB5 (LED ON or OFF)
    PORTB ^= (1 << PB5);
}

// ISR for Timer1 Compare Match B interrupt
ISR(TIMER1_COMPB_vect) {
    // Ensure PB5 is turned OFF (clear bit)
    PORTB &= ~(1 << PB5);
}

int main(void) {
    // Set PB5 (LED pin) as an output
    DDRB |= (1 << PB5);

    // Configure Timer1 for Fast PWM Mode 15 (ICR1 as top)
    TCCR1A = (1 << WGM11) | (1 << WGM10);  // Set bits for Fast PWM mode
    TCCR1B = (1 << WGM13) | (1 << WGM12);  // Complete Fast PWM setup

    // Set Timer1 prescaler to 1024 (slows down the timer clock frequency)
    TCCR1B |= (1 << CS12) | (1 << CS10);

    // Set Timer1 Compare Match A value for 1000 ms timeout
	//OCR1A is for HIGH
    OCR1A = 1171;  // Corresponds to ~1000 ms at 16 MHz clock with 1024 prescaler
	//OCR1B is for LOW
    // Set Timer1 Compare Match B value for 100 ms timeout
    OCR1B = 11720;   // Corresponds to ~100 ms at 16 MHz clock with 1024 prescaler
	//BUt total is 65 000, So only on for 11720 - 1171 = 
    // Enable Timer1 Compare Match A and B interrupts
    TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);

    // Enable global interrupts
    sei();

    // Infinite loop (main program does nothing; everything happens in the ISRs)
    while (1);
}
