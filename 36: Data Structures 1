Learn about arrays:
What are arrays?
Arrays are storing (methods) for many values that are similar.
Ex:
Single variable to store one value
int bank_note = 5;
Array to store  many values
int bank_notes[] = {5, 0, 20, 50};

You can access items of an array:
bank_notes[1] = 10;

The array stores the elements close to each other and fixed space apart.
printf("Address of:\nbank_notes[0] = %p\nbank_notes[1] = %p",&bank_notes[0],&bank_notes[1]);

Output:
Address of:
bank_notes[0] = 00000080c17ff980
bank_notes[1] = 00000080c17ff984

Functions and Array:
You can pass arrays to functions and this will pass the array by reference(using the address 
of the first element in the array) and not by value.

This means that the value will be changed in the array.
If we do using a variable then the value will stay the same.
Ex:
#include <stdio.h>
#include <stdlib.h>

void fun(int bank_notes[]){
	bank_notes[1] = 10; // change the second element
}

int main(){
	int bank_notes[] = {5, 0, 20, 50};

	printf("Value: bank_notes[1] = %d\n", bank_notes[1]); //output 0
	fun(bank_notes);
	printf("Value: bank_notes[1] = %d\n", bank_notes[1]); // output 10

	return 0;
}


Structures:
Are a way to group several related variables into one place.
Why use them?
If you have a group of students. You would want to store each name, age, parents name, parents email together.

struct students{
	char name[10];
	int age;
	char p_name[10];
	char email[30];
};

//To create a structure students for a student name tayyab
struct students s1;

//To update the struct student
strcpy(s1.name, "Tayyab");
s1.age = 24;
strcpy(s1.p_name, "Haris");
strcpy(s1.email, "Tayyabbaig1308");

printf("Student 1\n");
printf("%s\n", s1.name);
printf("%d\n", s1.age);
printf("%s\n", s1.p_name);
printf("%s\n", s1.email);

Array of Structures:

previous:
struct students{
	char name[10];
	int age;
	char p_name[10];
	char email[30];
};

struct students Tayyab;
What if?
struct students class1[30];
You just created an array that stores several structures
You can update the structures
strcpy(class1[1].name, "Tayyab");
class1[1].age = 24;

Importance:
If you try to create 1000 employee structures then it will look like this.
struct Employee emp1, emp2, emp3, .. . ... . ..  ... emp1000;

Its better to just do
struct Employee emp[1000];


Traversal:
struct A {
    int var;
  	char c;
};

struct A arr[5] = 	{ {1, 'a'}, 
			  {2, 'b'}, {3, 'c'},
                          {4, 'd'}, 
			  {5, 'e'} };
// Traverse arr
for (int i = 0; i < 5; i++)
      	printf("%d %c\n", arr[i].var, arr[i].c);

output:
1 a
2 b
3 c
4 d
5 e


Mini project: Student Management System (Array of Structures)
Objective:
Create a simple student management system that allows a user to:
1. Add students
2. Display all student records
3. Search for a student by name

Let's build the addStudent() function step by step.
Since youâ€™re using an array of structures, addStudent() needs to:
1. Take user input for the student's name, age, parent's name, and email.
2. Store the data in the class array at the current index.
3. Increment the totalStudents counter.

#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 30


struct Student {
    char name[30];
    int age;
    char parent_name[30];
    char email[50];
};

struct Student class[MAX_STUDENTS];
int totalStudents = 0;

void addStudent(){
	if (totalStudents>=MAX_STUDENTS){
	        printf("Cannot add more students. Limit reached.\n");
        	return;
	}
	printf("Enter student name: ");
	fgets(class[totalStudents].name, sizeof(class[totalStudents].name), stdin);
	class[totalStudents].name[strcspn(class[totalStudents].name, "\n")] = '\0';// Remove newline

	printf("Enter age: ");
	scanf("%d", &class[totalStudents].age);
	getchar();// Consume leftover newline from input buffer

	printf("Enter parent's name: ");
	fgets(class[totalStudents].parent_name, sizeof(class[totalStudents].parent_name), stdin);
    	class[totalStudents].parent_name[strcspn(class[totalStudents].parent_name, "\n")] = '\0';

	printf("Enter email: ");
    	fgets(class[totalStudents].email, sizeof(class[totalStudents].email), stdin);
   	class[totalStudents].email[strcspn(class[totalStudents].email, "\n")] = '\0';

    	printf("Student added successfully.\n");
    	totalStudents++;

};

void displayStudents(){

};
void searchStudent(){

};


int main() {
    int choice;
    do {
        printf("\nStudent Management System\n");
        printf("1. Add Student\n");
        printf("2. Display All Students\n");
        printf("3. Search Student by Name\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // to consume the newline

        switch(choice) {
            case 1: addStudent(); break;
            case 2: displayStudents(); break;
            case 3: searchStudent(); break;
            case 4: printf("Exiting...\n"); break;
            default: printf("Invalid choice\n");
        }
    } while(choice != 4);

    return 0;
}

__________________________________________________________________________________
FInal:
#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 30


struct Student {
    char name[30];
    int age;
    char parent_name[30];
    char email[50];
};

struct Student class[MAX_STUDENTS];
int totalStudents = 0;

void addStudent(){
	if (totalStudents>=MAX_STUDENTS){
	        printf("Cannot add more students. Limit reached.\n");
        	return;
	}
	printf("Enter student name: ");
	fgets(class[totalStudents].name, sizeof(class[totalStudents].name), stdin);
	class[totalStudents].name[strcspn(class[totalStudents].name, "\n")] = '\0';// Remove newline

	printf("Enter age: ");
	scanf("%d", &class[totalStudents].age);
	getchar();// Consume leftover newline from input buffer

	printf("Enter parent's name: ");
	fgets(class[totalStudents].parent_name, sizeof(class[totalStudents].parent_name), stdin);
    	class[totalStudents].parent_name[strcspn(class[totalStudents].parent_name, "\n")] = '\0';

	printf("Enter email: ");
    	fgets(class[totalStudents].email, sizeof(class[totalStudents].email), stdin);
   	class[totalStudents].email[strcspn(class[totalStudents].email, "\n")] = '\0';

    	printf("Student added successfully.\n");
    	totalStudents++;

};

void displayStudents(){
	printf("Student|Age|Parent|Email\n");
	for(int i = 0; i < totalStudents;i++){
		printf("%s|",&class[i].name);
		printf("%d|",class[i].age);
		printf("%s|",&class[i].parent_name);
		printf("%s|",&class[i].email);
		printf("\n");
	}
};
void searchStudent(){
	char name[50];
	printf("Enter Name of Student: ");
	scanf("%s",&name);

	for(int i = 0; i<totalStudents; i++){
		if( strcmp(name, class[i].name) == 0 ){
			printf("Student found\n");
			printf("Name: %s\n", class[i].name);
        		printf("Age: %d\n", class[i].age);
        		printf("Parent: %s\n", class[i].parent_name);
        		printf("Email: %s\n", class[i].email);
			return;
		}

	}
	printf("Student not found\n");

};


int main() {
    int choice;
    do {
        printf("\nStudent Management System\n");
        printf("1. Add Student\n");
        printf("2. Display All Students\n");
        printf("3. Search Student by Name\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // to consume the newline

        switch(choice) {
            case 1: addStudent(); break;
            case 2: displayStudents(); break;
            case 3: searchStudent(); break;
            case 4: printf("Exiting...\n"); break;
            default: printf("Invalid choice\n");
        }
    } while(choice != 4);

    return 0;
}


