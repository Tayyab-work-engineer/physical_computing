Implementing a Stack Using an Array

What is a Stack?
A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. 
This means that the last element added to the stack is the first one to be removed.
For example, if the numbers 1, 2, 3, and 4 are pushed onto the stack in that order, 
they will be popped in the reverse order: 4, 3, 2, 1.

Applications of a Stack:
Function call management (recursion)
Expression evaluation and syntax parsing
Backtracking algorithms (e.g., maze solving, undo functionality)
Compile-time memory management
Implementation of efficient algorithms such as depth-first search (DFS)

Implementing a stack(beginner):
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 4

int top = -1;
int stack[SIZE];

void push(){
    int x;//element to add
    //Adds an element to the top of the stack.
    //First, it checks whether top is equivalent to SIZE - 1
    if(top == SIZE-1){
        printf("\nOverflow!!");
        
    }
    else{
        printf("\nEnter the element to be added onto the stack: ");
        scanf("%d", &x);
        top = top + 1;
        stack[top] = x;
        
    }
}

void pop(){
    
    if(top==-1){
        printf("\nUnderflow");
    }
    else{
        //the topmost element is removed, and the program outputs the resulting stack.
        printf("\nPopped element: %d", stack[top]);
        top = top -1;
        
    }
    
}

void show()
{
    if (top == -1)
    {
        printf("\nUnderflow!!");
    }
    else
    {
        printf("\nElements present in the stack: \n");
        for (int i = top; i >= 0; --i)
            //--i means
            //i=3, then --i means 3 then later 2
            printf("%d\n", stack[i]);
    }
}

int main() {
    int choice;

    while (1)
    {
        printf("\nPerform operations on the stack:");
        printf("\n1.Push the element\n2.Pop the element\n3.Show\n4.End");
        printf("\n\nEnter the choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1:
                push();
                break;
                
            case 2:
                pop();
                break;
                
            case 3:
                    show();
                    break;
            case 4:
                    exit(0);
                
            default:
                printf("\nInvalid choice!!");
        }
    }
    

    return 0;
}


Implementing stack the advance way: (https://www.youtube.com/watch?v=Flk5yrlx5Qo)



Stacks using linked list.
Use linked list when the size of stack is not known. You can create as many nodes.
Visualize.
34 --> 21 --> 78
The head(top) points to 34 which is the first node of the list.
For push operation a node will be inserted at the beginning of the linked list.
This new element will be pushed in front of the linked list.
50 --> 34 --> 21 --> 78
The head(top) will be changed and 
Now the head(top) points to 50.
For pop operation, 50 will be removed as its last in first out. So head(top)
will change to 34 and 50 will be removed from memory.

Push Operation Code:(https://www.youtube.com/watch?v=25oEU6h6zqw)
Procedure:
1. Create a new node
2. Put the address of the first node(34) in the link part of the new node
3. Update the top pointer and make it to point to the new node of the linked list.

Coding:
struct node* newNode; //create a new node
newNode = malloc(sizeof(newNode));
newNode->data = data;
newNode->link = NULL;

newNode->link = top; //Put the address of the first node(34) in the link part of the new node

top = newNode;//Update the top pointer and make it to point to the new node of the linked list.

Complete function
void push(int data){
    struct node* newNode;
    newNode = malloc(sizeof(newNode));
    if(newNode==NULL){
        printf("Stack overflow.");
        exit(1);

    }
    newNode->data = data;
    newNode->link = NULL;

    newNode->link = top;
    top = newNode;
}

final vid: (https://www.youtube.com/watch?v=311qJJHiQjU)












