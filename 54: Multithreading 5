Explore thread-safe programming techniques.

What is thread safety?
Multri threads can access the same resources and they need to be careful so that they are aware 
when one thread makes the change, the other thread knows of it and then proceeds after. 

Locks
You can use locks to lock a piece of memory so that other threads can't access it until you are done,
writing to it. They are blocked and are waiting for the thread to finish and it gets unlocked.

Adv:

Dis adv:
Real time systems avoid the use of locks because a thread could block a critical thread(like thrusters for a jet).
The resulting behaviour of the system could be disastrous. 

Condition Variables
When one thread is running and it has the lock, then another thread is blocked because it doesn't have the lock,
thread 1 can use pthread_cond_wait(), to be one hold and release the parameters inside such as lock until the 
pthread_cond_signal() is called. Which will start thread 1 again.

The pthread_cond_wait() release a lock specified by mutex and wait on condition cond variable. 
The pthread_cond_signal() wake up threads waiting for the condition variable. 

Ex:
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

pthread_mutex_t mutex;
pthread_cond_t cond;

int done = 1;

void* foo(){
	pthread_mutex_lock(&mutex);
	if (done==1){
		done = 2;
		printf("Waiting on condition variable cond1\n");
		pthread_cond_wait(&cond,&mutex); //thread1 will pause here and release the lock
		//until thread2 comes and done the signal
		printf("thread1\n");


	}
	else{
		printf("Signaling condition variable cond1\n");
		pthread_cond_signal(&cond);//signal and will cause thread 1 to start after it gives up the lock
		printf("thread 2\n");

	}
	pthread_mutex_unlock(&mutex);
	printf("Returning thread\n");

	return NULL;

}


int main(){
	pthread_t th[2];

	pthread_mutex_init(&mutex, NULL);
	pthread_cond_init(&cond, NULL);

	pthread_create(&th[0], NULL, &foo, NULL);
	sleep(1);

	pthread_create(&th[1], NULL, &foo, NULL);

	for(int i = 0; i<2; i++){ 
		pthread_join(th[i],NULL);
	}

	pthread_mutex_destroy(&mutex);
	pthread_cond_destroy(&cond);


	return 0;

}

Output:
Waiting on condition variable cond1
Signaling condition variable cond1
thread 2
Returning thread
thread1
Returning thread

Semaphores:
Binary Semaphore: This is also known as a mutex lock. It can have only two values - 0 and 1. Its value is initialized to 1. 
There are multiple processes and a single resource. When a process wants to access a critical section (resource), it checks if the s
value is 0 using the wait function. If it is not zero then it will make it zero and it can access the critical section. Once it finishes with the
critical section then the s value will be increased using the function signal. 
All the processes have to wait if the s value is zero.


Counting Semaphore: Counting semaphores can be used to control access to a given resource consisting of a finite number of instances. 
The semaphore is initialized to the number of resources available. Its value can range over an unrestricted domain.
The only difference is that the s value is not limited to 1. If the value is 2 then 2 processes will be able to access the resource and
the third process will have to wait because the s value is 0.

Ex: producer and consumer problem
Customer takes item from the shelf
producer puts items into the shelf

Customer cannot take item if there are not items on the shelf
Consumer must not put anymore items if the shelf is full.

If there are items in the shelf then customer will get the lock and take item from the shelf then will release the lock.
If there are no items in the shelf then producer will get the lock and insert an item to the shelf and then release the lock.

Ex:












Adv:

Disadv:
1. need to keep track of calls of wait and signal. Need to be done in correct order or there can be a deadlock
2. priority inversion taking place

