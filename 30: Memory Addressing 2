Explore memory layout: 
refers to how the programâ€™s data is stored in the computer memory during its execution. 
A C program's memory is organised into specific regions(segments).
Layout: From low address to high address
Text Segment(code), Initialised Data(Static/Global), Uninitialised Data(bss)(Static/Global), Heap(), Stack(Function calls/local variables).

stack:
Stack memory is near the top of memory with high addresses. Each time a function is called,
the machine allocates some stack memory for it. When a variable is declared, more stack memory is
allocated. After the function returns, the stack memory of that function is deallocated.
Explain how this program uses the stack memory:
int hello() {
    int a = 100;
    return a;
}

int main(){
    int a;
    int b = -3;
    int c = 12345;
    int *p = &b;
    int d = hello();
    return 0;
}


Heap: 
For allocating large chunks of memory, or keeping variable in the memory till the time we want.
Unlike stack, applications heap is not fixed. Its size can vary even when the program is running and 
A programmer can control it. We need to be careful when using heap because it can make the memory
run out if the programmer keeps requesting it. 
How to use heap:
Use these functions malloc, calloc, realloc, free

Ex: explain this code using the memory layout
#include <stdio.h>
#include <stdlib.h>
int main(){
    int a;// goes on stack
    // to get some space on the heap use the malloc
    int *p;
    p = (int*)malloc(sizeof(int)); //one block of 4 bytes is reserved on the heap 
    //malloc returns a pointer to the starting address of this block,
    // p will be located in the stack frame of the main, and store the address
    *p = 10; //put something on p.
    free(p); //deallocate
    p = (int*)malloc(2*sizeof(int)); //2 blocks of 4 bytes is reserved on the heap 
    *p = 20; // or p[0]
    *(p+1) = 30; //or p[1]
    free(p);
    }


Static/global memory

Code segment.

Question: WHat happens in the memory when this program is executed? Stack segment, Global segment
#include <stdio.h>

int total;

int Square(int x)
{
    return x * x;
}

int SquareOfSum(int x, int y)
{
    int z = Square(x + y);
    return z;
}

int main()
{
    int a = 4, b = 8;
    total = SquareOfSum(a, b);
    printf("output = %d", total);
}
