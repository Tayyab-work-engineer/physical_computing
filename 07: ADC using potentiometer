
Construct circuit using pic 07 
Code:
#include <avr/io.h>

int main(void)
{
    // Configure PB1 as output
    DDRB = (1<<PB1);

    // Set up ADC
    ADMUX = (1<<REFS0); // Use AVcc as voltage reference
    ADMUX |= (1<<ADLAR); // Left-adjust the ADC result
    ADMUX |= (1<<MUX0); // Select ADC1 as input

    // Set ADC prescaler to 128
    ADCSRA = (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);

    // Enable ADC
    ADCSRA |= (1<<ADEN);

    while (1) {
        // Start ADC conversion
        ADCSRA |= (1<<ADSC);
        // Wait for conversion to complete
        while (ADCSRA & (1<<ADSC))
            ;

        // Check ADC result and toggle LED
        if (ADCH > 50) {
            PORTB |= (1<<PB1); // Turn on PB1
        } else {
            PORTB &= ~(1<<PB1); // Turn off PB1
        }
    }

    return 0;
}



This code has the same set up and does the same thing but uses interrupts:
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(ADC_vect) {
	uint16_t adc_value = ADCH; // Read 8bit ADC value
    	if (adc_value < 128) {
            	PORTB |= (1<<PB1); // Turn on PB1
    	} else {
            	PORTB &= ~(1<<PB1); // Turn off PB1
    	}
}


void adc_init(void){

	ADMUX = (1<<REFS0); // Use AVcc as voltage reference

    	ADMUX |= (1<<ADLAR); // Left-adjust the ADC result
    	ADMUX |= (1<<MUX0); // Select ADC1 as input

    	// Set ADC prescaler to 128
    	ADCSRA = (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
	
	//Enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
	//generate interrupt when adc conversion is complete
	ADCSRA |= (1<<ADATE);
    	// Enable ADC
    	ADCSRA |= (1<<ADEN);

	//Start conversion
	ADCSRA |= (1<<ADSC);


}

int main(void)
{
    	// Configure PB1 as output
    	DDRB = (1<<PB1);
	adc_init();
	
	sei();
    	while (1){
	}

    	return 0;
}


code 3:
interrupt + send a string over UART, uses the same circuit

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdlib.h> // Required for itoa()
#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <util/delay.h>

#define BAUD 9600
#include <util/setbaud.h>


void led_init(void){
    DDRB = (1<<PB5);
    PORTB = 0;
}

void led_ON(void){
    PORTB = (1<<PB5);
}
void led_OFF(void){
    PORTB = (0<<PB5);
}

void adc_init(void){
    ADMUX = (1<<REFS0);
    ADMUX |= (1<<ADLAR);
    
    //set adc prescaler to 128
    
    ADCSRA = (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
    ADMUX |= (1<<MUX1); // Select ADC1 as input

    
    //Enable the ADC interrupt
    ADCSRA |= (1<<ADIE);
    //generate interrupt when adc conversion is complete
    ADCSRA |= (1<<ADATE);
    // Enable ADC
    ADCSRA |= (1<<ADEN);

    //Start conversion
    ADCSRA |= (1<<ADSC);

}

// Function to send a string over UART
void uart_transmit_string(const char* str) {
    while (*str) {
        while (!(UCSR0A & (1 << UDRE0))); // Wait until buffer is empty
        UDR0 = *str++;
    }
}

// Function to send an integer over UART
void uart_transmit_int(int number) {
    char buffer[10]; // Buffer to store the converted number
    itoa(number, buffer, 10); // Convert integer to string (base 10)
    uart_transmit_string(buffer);
    uart_transmit_string("\r\n"); // New line
}

void uart_init(){
    UBRR0H = UBRRH_VALUE;
    UBRR0L = UBRRL_VALUE;
    //character size 8
    UCSR0C = UCSR0C | (1<<UCSZ01) | (1<<UCSZ00); //bitwise OR

    UCSR0B = UCSR0B | (1<<TXEN0); // Enable transmitter

}

ISR(ADC_vect) {
    uint16_t adc_value = ADCH; // Read 8bit ADC value
    if (adc_value < 128) {
        led_ON();
        uart_transmit_int(ADCH);

    } else {
        led_OFF();
        uart_transmit_int(ADCH);

    }
}


int main(void)
{
    led_init();
    adc_init();
    
    uart_init();

    sei();

    while (1)
        ;

    return 0;
}

