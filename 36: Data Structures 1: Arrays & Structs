Learn about arrays:
What are arrays?
Arrays are storing (methods) for many values that are similar.
Ex:
Single variable to store one value
int bank_note = 5;
Array to store  many values
int bank_notes[] = {5, 0, 20, 50};

You can access items of an array:
bank_notes[1] = 10;

The array stores the elements close to each other and fixed space apart.
printf("Address of:\nbank_notes[0] = %p\nbank_notes[1] = %p",&bank_notes[0],&bank_notes[1]);

Output:
Address of:
bank_notes[0] = 00000080c17ff980
bank_notes[1] = 00000080c17ff984

Functions and Array:
You can pass arrays to functions and this will pass the array by reference(using the address 
of the first element in the array) and not by value.

This means that the value will be changed in the array.
If we do using a variable then the value will stay the same.
Ex:
#include <stdio.h>
#include <stdlib.h>

void fun(int bank_notes[]){
	bank_notes[1] = 10; // change the second element
}

int main(){
	int bank_notes[] = {5, 0, 20, 50};

	printf("Value: bank_notes[1] = %d\n", bank_notes[1]); //output 0
	fun(bank_notes);
	printf("Value: bank_notes[1] = %d\n", bank_notes[1]); // output 10

	return 0;
}


Structures:
Are a way to group several related variables into one place.
Why use them?
If you have a group of students. You would want to store each name, age, parents name, parents email together.

struct students{
	char name[10];
	int age;
	char p_name[10];
	char email[30];
};

//To create a structure students for a student name tayyab
struct students s1;

//To update the struct student
strcpy(s1.name, "Tayyab");
s1.age = 24;
strcpy(s1.p_name, "Haris");
strcpy(s1.email, "Tayyabbaig1308");

printf("Student 1\n");
printf("%s\n", s1.name);
printf("%d\n", s1.age);
printf("%s\n", s1.p_name);
printf("%s\n", s1.email);

Array of Structures:

previous:
struct students{
	char name[10];
	int age;
	char p_name[10];
	char email[30];
};

struct students Tayyab;
What if?
struct students class1[30];
You just created an array that stores several structures
You can update the structures
strcpy(class1[1].name, "Tayyab");
class1[1].age = 24;

Importance:
If you try to create 1000 employee structures then it will look like this.
struct Employee emp1, emp2, emp3, .. . ... . ..  ... emp1000;

Its better to just do
struct Employee emp[1000];


Traversal:
struct A {
    int var;
  	char c;
};

struct A arr[5] = 	{ {1, 'a'}, 
			  {2, 'b'}, {3, 'c'},
                          {4, 'd'}, 
			  {5, 'e'} };
// Traverse arr
for (int i = 0; i < 5; i++)
      	printf("%d %c\n", arr[i].var, arr[i].c);

output:
1 a
2 b
3 c
4 d
5 e


Task:
Create a program that stores information about 3 students using a structure. 
Each student has a name, roll number, and three test scores.
Use an array of structures to store the students and display the average marks for each.


Code:
#include <stdio.h>
#include <stdlib.h>

struct Student{
	char name[20];
	int rollNumber;
	int maths;
	int english;
	int science;

};

int main(){
	struct Student students[3] = {
        	{"Tayyab", 1 , 50, 100, 20},
        	{"Abdullah", 2, 70, 80, 90},
        	{"Max", 3, 60, 75, 85}

	};

	for (int i = 0; i < 3; i++) {
        	int total = students[i].maths + students[i].english + students[i].science;
        	float average = total / 3.0;

        	printf("Name: %s\n", students[i].name);
        	printf("Roll Number: %d\n", students[i].rollNumber);
        	printf("Average Marks: %.2f\n\n", average);
    	}
	return 0;

}
